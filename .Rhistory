date: "February 4, 2017"
output: html_document
---
```{r echo = FALSE}
library("httr")
library("jsonlite")
library("knitr")
source <-  "https://congress.api.sunlightfoundation.com/"
setup <- "99163"
congress.data <- GET(paste0(source, "legislators/locate?zip=", setup))
congress.frame <- fromJSON(content(congress.data, "text"))
congress.frame <- flatten(congress.frame$results)
base.picture.url <- "![](https://theunitedstates.io/images/congress/225x275/"
all.stats <- paste0(congress.frame$first_name, " ", congress.frame$last_name, " (",
congress.frame$state, "-", congress.frame$party, "). Phone number: ",
congress.frame$phone)
all.pictures <- paste0(base.picture.url, congress.frame$bioguide_id, ".jpg)")
my.interest <- "budget"
```
### This report aims to show the senators and local representatives from a specified zip code.
### The zip code being used now is: `r setup`. The representatives for this district are:
| `r all.pictures[1]` | `r all.pictures[2]` | `r all.pictures[3]` |
|:-----------------:|:-----------------:|:-----------------:|
| `r all.stats[1]` | `r all.stats[2]` | `r all.stats[3]` |
```{r echo = FALSE}
bill.data <- GET(paste0(source, "bills/search?query=", my.interest, "&order=introduced_on&per_page=25"))
bills <- fromJSON(content(bill.data, "text"))
bills <- flatten(bills$results)
simple.bills <- # mutate(bills, link.to.url = paste0("[Link](", urls.congress, ")")) %>%
select(bills, bill_id, introduced_on, official_title, link.to.url)
View(simple.bills)
```
`r kable(simple.bills)`
---
title: "Congress Statistics"
author: "Timothy McAleer"
date: "February 4, 2017"
output: html_document
---
```{r echo = FALSE}
library("dplyr")
library("httr")
library("jsonlite")
library("knitr")
source <-  "https://congress.api.sunlightfoundation.com/"
setup <- "99163"
congress.data <- GET(paste0(source, "legislators/locate?zip=", setup))
congress.frame <- fromJSON(content(congress.data, "text"))
congress.frame <- flatten(congress.frame$results)
base.picture.url <- "![](https://theunitedstates.io/images/congress/225x275/"
all.stats <- paste0(congress.frame$first_name, " ", congress.frame$last_name, " (",
congress.frame$state, "-", congress.frame$party, "). Phone number: ",
congress.frame$phone)
all.pictures <- paste0(base.picture.url, congress.frame$bioguide_id, ".jpg)")
my.interest <- "budget"
```
### This report aims to show the senators and local representatives from a specified zip code.
### The zip code being used now is: `r setup`. The representatives for this district are:
| `r all.pictures[1]` | `r all.pictures[2]` | `r all.pictures[3]` |
|:-----------------:|:-----------------:|:-----------------:|
| `r all.stats[1]` | `r all.stats[2]` | `r all.stats[3]` |
```{r echo = FALSE}
bill.data <- GET(paste0(source, "bills/search?query=", my.interest, "&order=introduced_on&per_page=25"))
bills <- fromJSON(content(bill.data, "text"))
bills <- flatten(bills$results)
simple.bills <- # mutate(bills, link.to.url = paste0("[Link](", urls.congress, ")")) %>%
select(bills, bill_id, introduced_on, official_title, link.to.url)
View(simple.bills)
```
`r kable(simple.bills)`
---
title: "Congress Statistics"
author: "Timothy McAleer"
date: "February 4, 2017"
output: html_document
---
```{r echo = FALSE}
library("dplyr")
library("httr")
library("jsonlite")
library("knitr")
source <-  "https://congress.api.sunlightfoundation.com/"
setup <- "99163"
congress.data <- GET(paste0(source, "legislators/locate?zip=", setup))
congress.frame <- fromJSON(content(congress.data, "text"))
congress.frame <- flatten(congress.frame$results)
base.picture.url <- "![](https://theunitedstates.io/images/congress/225x275/"
all.stats <- paste0(congress.frame$first_name, " ", congress.frame$last_name, " (",
congress.frame$state, "-", congress.frame$party, "). Phone number: ",
congress.frame$phone)
all.pictures <- paste0(base.picture.url, congress.frame$bioguide_id, ".jpg)")
my.interest <- "budget"
```
### This report aims to show the senators and local representatives from a specified zip code.
### The zip code being used now is: `r setup`. The representatives for this district are:
| `r all.pictures[1]` | `r all.pictures[2]` | `r all.pictures[3]` |
|:-----------------:|:-----------------:|:-----------------:|
| `r all.stats[1]` | `r all.stats[2]` | `r all.stats[3]` |
```{r echo = FALSE}
bill.data <- GET(paste0(source, "bills/search?query=", my.interest, "&order=introduced_on&per_page=25"))
bills <- fromJSON(content(bill.data, "text"))
bills <- flatten(bills$results)
simple.bills <- mutate(bills, link.to.url = paste0("[Link](", urls.congress, ")")) %>%
select(bill_id, introduced_on, official_title, link.to.url)
View(simple.bills)
```
`r kable(simple.bills)`
---
title: "Congress Statistics"
author: "Timothy McAleer"
date: "February 4, 2017"
output: html_document
---
```{r echo = FALSE}
library("dplyr")
library("httr")
library("jsonlite")
library("knitr")
source <-  "https://congress.api.sunlightfoundation.com/"
setup <- "99163"
congress.data <- GET(paste0(source, "legislators/locate?zip=", setup))
congress.frame <- fromJSON(content(congress.data, "text"))
congress.frame <- flatten(congress.frame$results)
base.picture.url <- "![](https://theunitedstates.io/images/congress/225x275/"
all.stats <- paste0(congress.frame$first_name, " ", congress.frame$last_name, " (",
congress.frame$state, "-", congress.frame$party, "). Phone number: ",
congress.frame$phone)
all.pictures <- paste0(base.picture.url, congress.frame$bioguide_id, ".jpg)")
my.interest <- "budget"
```
### This report aims to show the senators and local representatives from a specified zip code.
### The zip code being used now is: `r setup`. The representatives for this district are:
| `r all.pictures[1]` | `r all.pictures[2]` | `r all.pictures[3]` |
|:-----------------:|:-----------------:|:-----------------:|
| `r all.stats[1]` | `r all.stats[2]` | `r all.stats[3]` |
```{r echo = FALSE}
bill.data <- GET(paste0(source, "bills/search?query=", my.interest, "&order=introduced_on&per_page=25"))
bills <- fromJSON(content(bill.data, "text"))
bills <- flatten(bills$results)
simple.bills <- mutate(bills, link.to.url = paste0("[Link](", urls.congress, ")")) %>%
select(bill_id, introduced_on, official_title, link.to.url)
colnames(simple.bills) <- c("Bill", "Introduced", "Title", "More Information")
View(simple.bills)
```
`r kable(simple.bills)`
---
title: "Congress Statistics"
author: "Timothy McAleer"
date: "February 4, 2017"
output: html_document
---
```{r echo = FALSE}
library("dplyr")
library("httr")
library("jsonlite")
library("knitr")
source <-  "https://congress.api.sunlightfoundation.com/"
setup <- "99163"
congress.data <- GET(paste0(source, "legislators/locate?zip=", setup))
congress.frame <- fromJSON(content(congress.data, "text"))
congress.frame <- flatten(congress.frame$results)
base.picture.url <- "![](https://theunitedstates.io/images/congress/225x275/"
all.stats <- paste0(congress.frame$first_name, " ", congress.frame$last_name, " (",
congress.frame$state, "-", congress.frame$party, "). Phone number: ",
congress.frame$phone)
all.pictures <- paste0(base.picture.url, congress.frame$bioguide_id, ".jpg)")
my.interest <- "budget"
```
### This report aims to show the senators and local representatives from a specified zip code.
### The zip code being used now is: `r setup`. The representatives for this district are:
| `r all.pictures[1]` | `r all.pictures[2]` | `r all.pictures[3]` |
|:-----------------:|:-----------------:|:-----------------:|
| `r all.stats[1]` | `r all.stats[2]` | `r all.stats[3]` |
```{r echo = FALSE}
bill.data <- GET(paste0(source, "bills/search?query=", my.interest, "&order=introduced_on&per_page=25"))
bills <- fromJSON(content(bill.data, "text"))
bills <- flatten(bills$results)
simple.bills <- mutate(bills, link.to.url = paste0("[Link](", urls.congress, ")")) %>%
select(bill_id, introduced_on, official_title, link.to.url)
colnames(simple.bills) <- c("Bill", "Introduced", "Title", "More Information")
voted.on <- filter(bills, history.active == TRUE)
View(voted.on)
```
`r kable(simple.bills)`
responses <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
View(responses)
# Load the shiny, ggplot2, and dplyr libraries
library(shiny)
library(dplyr)
library(ggplot2)
diamonds.sample <- sample_n(diamonds, 3000)
View(diamonds.sample)
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
print(price.range)
print(carat.range)
runApp('Info 201/module15-shiny/exercise-2')
# Load the shiny, ggplot2, and dplyr libraries
library(shiny)
library(ggplot2)
library(dplyr)
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
# For convenience store the `range()` of values for the `price` and `carat` values
# for the ENTIRE diamonds dataset.
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
# Define a UI using a fluidPage layout
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('price.choice', label="Price (in dollars)", min=price.range[1], max=price.range[2], value=price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput('carat.choice', label="Carats", min=carat.range[1], max=carat.range[2], value=carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('smooth', label=strong("Show Trendline"), value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet.by', label="Facet By", choices=c('cut', 'clarity', 'color'))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
# Define a Server function for the app
server <- function(input, output) {
# reactive variable for shared data
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
p <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color=cut)) +
geom_point() +
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
output$table <- renderDataTable({
return(filtered())
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Info 201/module15-shiny/exercise-2')
install.packages("rsconnect")
runApp('Info 201/module15-shiny/exercise-2')
shiny::runApp('Info 201/CSPFinalProject')
runApp('Info 201/CSPFinalProject')
runApp('Info 201/CSPFinalProject')
View(econ.table)
econ.csv <- read.csv("data/ECN_2012_US_52A1.csv", stringsAsFactors = FALSE)
econ.table <- data.frame(econ.csv)
View(econ.table)
setwd("~/Info 201/CSPFinalProject")
econ.csv <- read.csv("data/ECN_2012_US_52A1.csv", stringsAsFactors = FALSE)
econ.table <- data.frame(econ.csv)
View(econ.table)
library("httr")
library("jsonlite")
library("shiny")
library("ggplot2")
library("dplyr")
econ.csv <- read.csv("data/ECN_2012_US_52A1.csv", stringsAsFactors = FALSE)
econ.table <- data.frame(econ.csv)
View(econ.table)
filtered.econ <- filter(econ.table, NAICS.display.label == "Finance and insurance") %>%
select(GEO.display.label, PAYANN, ESTAB, EMP)
filtered.econ$PAYANN <- as.numeric(filtered.econ$PAYANN)
filtered.econ$ESTAB <- as.numeric(filtered.econ$ESTAB)
filtered.econ$EMP <- as.numeric(filtered.econ$EMP)
filtered.econ$EMP <- cut(filtered.econ$EMP, breaks <- c(0, 10000,20000,40000,80000,160000,
320000,640000))
server <- function(input, output) {
# reactive table that is used in both the table and ggplot
filtered <- reactive({
new.table <- filter(filtered.econ, GEO.display.label %in% input$checkGroup)
return(new.table)
})
# The graph, that is based off the reactive data, and inputted color scheme
output$plot <- renderPlot({
p <- ggplot(data = filtered()) +
geom_point(mapping = aes(x = as.numeric(ESTAB), y = as.numeric(PAYANN), color = EMP), size = 3) +
scale_color_brewer(palette = "BuPu") +
xlab("Number of Establishments") +
ylab("Annual Payroll ($1,000)")
#    if (input$color.choice == "Primary") {
#      p <- p + scale_color_manual(values = c("#EA2828", "#2158C6", "#C6AC19"))
#    } else if (input$color.choice == "Cool") {
#      p <- p + scale_color_manual(values = c("#2B59C3", "#3CB8C8", "#500C84"))
#    } else {
#      p <- p + scale_color_manual(values = c("#EAD143", "#A41111", "#D96431"))
#    }
return(p)
})
# The data below the graph that shows the coordinates of the point
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
paste0("click: ", xy_str(input$plot_click))
})
output$summary <- renderText({
current.species <- function(number) {
if (!is.na(input$checkGroup[number])) {
paste0(input$checkGroup[number], sep = ", ")
}
}
message <- paste0("This graph shows the petal-length of Irises in relation to the sepal-length,\n",
"colored by species. The current species are: ", current.species(1), current.species(2),
current.species(3))
return(message)
})
output$table.summary <- renderText({
current.range <- function() {
if (!is.na(input$sepal.choice)) {
paste0(round(input$sepal.choice[1], 2), " - ", round(input$sepal.choice[2], 2))
}
}
current.species <- function(number) {
if (!is.na(input$checkGroup[number])) {
paste0(input$checkGroup[number], sep = ", ")
}
}
table.message <- paste0("This table shows the current range of: ", current.range(),
" for sepal length. It is also showing the species: ", current.species(1),
current.species(2), current.species(3))
})
# Generate an table view of the reactive data
output$table <- renderTable({
data.frame(x=filtered())
})
}
# Makes the server
shinyServer(server)
# Makes a UI using a fluidPage layout
ui <- fluidPage(
# Makes a new title Panel
titlePanel("2012 Economic Revenue in the United States"),
sidebarLayout(
# Includes three items on the left panel
sidebarPanel(
# A checkboxGroupInput that lets the user select which flowers are shown
checkboxGroupInput("checkGroup", label = h4("Region"),
choices = c("Northwest" = c("Alaska", "Washington",
"Oregon", "Idaho", "Montana",
"Wyoming"),
"South" = c("Florida", "Mississippi",
"Louisiana", "Alabama", "Georgia",
"South Carolina", "North Carolina",
"Tennessee", "Arkansas", "Kentucky",
"Virginia"),
"Northeast" = c("Maine", "New Hampshire",
"Vermont", "Massachusetts",
"Rhode Island", "Connecticut",
"New York", "Pennsylvania", "Deleware",
"District of Columbia", "Maryland",
"New Jersey", "West Virginia"),
"Midwest" = c("Ohio", "Indiana", "Michigan",
"Illinois", "Wisconsin",
"Missouri", "Iowa", "Minnesota",
"Kansas", "Nebraska", "South Dakota",
"North Dakota"),
"Southwest" = c("California", "Hawaii", "Nevada",
"Utah", "Colorado",
"Arizona", "New Mexico",
"Oklahoma", "Texas")))
# A sliderInput labeled "Sepal Length" that lets the user select the range of
# Sepal length to be shown
#      sliderInput('sepal.choice', label="Sepal Length", min=round(sepal.length.range[1], 2),
#                  max=round(sepal.length.range[2], 2), value=round(sepal.length.range, 2)),
# A selectInput labeled "Color Scheme", that allows the user to select which color scheme they want
#      selectInput('color.choice', label="Color Scheme", choices=c('Primary', 'Cool', 'Hot'))
),
# The main Panel includes both the plot and table in two tabs
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", h4(textOutput("summary")), plotOutput("plot", click = "plot_click"),
verbatimTextOutput("info")),
tabPanel("Table", h4(textOutput("table.summary")), tableOutput("table"))
)
)
)
)
# Makes the UI
shinyUI(ui)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Northwest <-  c("Alaska", "Washington",
"Oregon", "Idaho", "Montana",
"Wyoming")
South <- c("Florida", "Mississippi",
"Louisiana", "Alabama", "Georgia",
"South Carolina", "North Carolina",
"Tennessee", "Arkansas", "Kentucky",
"Virginia")
Northeast <- c("Maine", "New Hampshire",
"Vermont", "Massachusetts",
"Rhode Island", "Connecticut",
"New York", "Pennsylvania", "Deleware",
"District of Columbia", "Maryland",
"New Jersey", "West Virginia")
Midwest <- c("Ohio", "Indiana", "Michigan",
"Illinois", "Wisconsin",
"Missouri", "Iowa", "Minnesota",
"Kansas", "Nebraska", "South Dakota",
"North Dakota")
Southwest <- c("California", "Hawaii", "Nevada",
"Utah", "Colorado",
"Arizona", "New Mexico",
"Oklahoma", "Texas")
regions <- data.frame(Northwest, South, Northeast, Midwest, Southwest)
View(regions)
Northwest <-  c("Alaska", "Washington",
"Oregon", "Idaho", "Montana",
"Wyoming", NA, NA, NA, NA,
NA, NA, NA)
South <- c("Florida", "Mississippi",
"Louisiana", "Alabama", "Georgia",
"South Carolina", "North Carolina",
"Tennessee", "Arkansas", "Kentucky",
"Virginia", NA, NA)
Northeast <- c("Maine", "New Hampshire",
"Vermont", "Massachusetts",
"Rhode Island", "Connecticut",
"New York", "Pennsylvania", "Deleware",
"District of Columbia", "Maryland",
"New Jersey", "West Virginia")
Midwest <- c("Ohio", "Indiana", "Michigan",
"Illinois", "Wisconsin",
"Missouri", "Iowa", "Minnesota",
"Kansas", "Nebraska", "South Dakota",
"North Dakota", NA)
Southwest <- c("California", "Hawaii", "Nevada",
"Utah", "Colorado",
"Arizona", "New Mexico",
"Oklahoma", "Texas", NA, NA, NA, NA)
regions <- data.frame(Northwest, South, Northeast, Midwest, Southwest)
View(regions)
View(regions)
regions <- data.frame(Northwest, South, Northeast, Midwest, Southwest)
View(regions)
Northwest <-  c("Alaska", "Washington",
"Oregon", "Idaho", "Montana",
"Wyoming", NA, NA, NA, NA,
NA, NA, NA)
South <- c("Florida", "Mississippi",
"Louisiana", "Alabama", "Georgia",
"South Carolina", "North Carolina",
"Tennessee", "Arkansas", "Kentucky",
"Virginia", NA, NA)
Northeast <- c("Maine", "New Hampshire",
"Vermont", "Massachusetts",
"Rhode Island", "Connecticut",
"New York", "Pennsylvania", "Deleware",
"District of Columbia", "Maryland",
"New Jersey", "West Virginia")
Midwest <- c("Ohio", "Indiana", "Michigan",
"Illinois", "Wisconsin",
"Missouri", "Iowa", "Minnesota",
"Kansas", "Nebraska", "South Dakota",
"North Dakota", NA)
Southwest <- c("California", "Hawaii", "Nevada",
"Utah", "Colorado",
"Arizona", "New Mexico",
"Oklahoma", "Texas", NA, NA, NA, NA)
regions <- data.frame(Northwest, South, Northeast, Midwest, Southwest)
View(regions)
View(regions)
View(regions)
View(regions)
View(regions)
