)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(input$state1 != "United States" && input$state2 != "United States",
plotOutput('state.compare')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(input.state1 != "United States" && input.state2 != "United States",
plotOutput('state.compare')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel("input.state1 != 'United States'" && "input.state2 != 'United States'",
plotOutput('state.compare')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel("input.state1 != 'United States' & input.state2 != 'United States'",
plotOutput('state.compare')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel("input.state1 != 'United States'",
conditionalPanel("input.state2 != 'United States'",
plotOutput('state.compare')
)
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 != 'United States'",
conditionalPanel(
condition = "input.state2 != 'United States'",
plotOutput('state.comp')
)
)
)
)
)
)
runApp('taxes.R')
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 !== 'United States'",
conditionalPanel(
condition = "input.state2 !== 'United States'",
plotOutput('state.comp')
)
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 == 'United States'",
conditionalPanel(
condition = "input.state2 == 'United States'",
plotOutput('state.comp')
)
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 == 'United States'",
conditionalPanel(
condition = "input.state2 == 'United States'",
plotOutput('state.comp')
)
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 == 'United States'",
conditionalPanel(
condition = "input.state2 == 'United States'",
plotOutput('state.comp')
)
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 == 'United States'",
plotOutput('state.comp')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 != 'United States'",
plotOutput('state.comp')
)
)
)
)
)
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
library(ggplot2)
library(dplyr)
library(shiny)
library(plotly)
# Arranging data set column names
tax.data <- read.csv(file = "data/Taxes_2015.csv", stringsAsFactors = FALSE)
colnames(tax.data) <- tax.data[1,]
tax.data <- tax.data[c(2:1582),]
# Filling in missing state id
state.id <- read.csv(file = "data/states.csv", stringsAsFactors = FALSE)
colnames(state.id) <- c("Geographic area name", "state.abbrev")
tax.data <- full_join(state.id, tax.data, by = "Geographic area name")
# Selecting and changing variable names to be ready for joining.
selected <- select(tax.data, State = `Geographic area name`, Id = state.abbrev,
`Tax Type` = `Meaning of Tax Type`, `Amount ($1,000)`) %>%
filter(State != "District of Columbia")
# Changing the amount to numbers so they can be graphed
selected$Amount <- as.numeric(selected$`Amount ($1,000)`) * 1000
# Getting all the unique values for users to select
tax.types <- unique(selected$`Tax Type`)
states <- unique(selected$State)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 != 'United States'",
plotOutput('state.comp')
)
)
)
)
)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
),
conditionalPanel(
condition = "input.state1 != 'United States'",
plotOutput('state.comp')
)
)
)
)
)
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
setwd("~/Desktop/Skool Stuff/UW/Winter '17/info201/CSPFinalProject")
runApp('taxes.R')
runApp('taxes.R')
View(selected)
ggplot() +
geom_col(data = state1(), mapping = aes(x = `Tax Type`, y = Amount, fill = State)) +
geom_col(data = state2(), mapping = aes(x = `Tax Type`, y = Amount, fill = State))
state1 <- reactive({
data <- selected %>%
filter(State %in% input$state1)
return (data)
})
state2 <- reactive({
data <- selected %>%
filter(State %in% input$state2)
return (data)
})
runApp('taxes.R')
library(ggplot2)
library(dplyr)
library(shiny)
library(plotly)
# Arranging data set column names
tax.data <- read.csv(file = "data/Taxes_2015.csv", stringsAsFactors = FALSE)
colnames(tax.data) <- tax.data[1,]
tax.data <- tax.data[c(2:1582),]
# Filling in missing state id
state.id <- read.csv(file = "data/states.csv", stringsAsFactors = FALSE)
colnames(state.id) <- c("Geographic area name", "state.abbrev")
tax.data <- full_join(state.id, tax.data, by = "Geographic area name")
# Selecting and changing variable names to be ready for joining.
selected <- select(tax.data, State = `Geographic area name`, Id = state.abbrev,
`Tax Type` = `Meaning of Tax Type`, `Amount ($1,000)`) %>%
filter(State != "District of Columbia")
# Changing the amount to numbers so they can be graphed
selected$Amount <- as.numeric(selected$`Amount ($1,000)`) * 1000
# Getting all the unique values for users to select
tax.types <- unique(selected$`Tax Type`)
states <- unique(selected$State)
ui <- fluidPage(
navbarPage(title = "Taxes",
tabPanel(title = "Taxes",
sidebarLayout(
sidebarPanel(
selectInput('facet', label = "Tax Types", choices = tax.types),
selectInput('state1', label = "State 1", choices = c("United States", states)),
selectInput('state2', label = "State 2", choices = c("United States", states))
),
mainPanel(
plotlyOutput('taxes.map')
plotOutput('state.compare')
)#,
#conditionalPanel(
#   condition = "input.s != 'United States'",
#   plotOutput('state.comp')
#)
)
)
)
)
server <- function(input, output) {
filtered <- reactive({
data <- selected %>%
filter(`Tax Type` == input$facet)
if (input$state1 != "United States" && input$state2 != "United States") {
data <- filter(data, State %in% c(input$state1, input$state2))
}
return (data)
})
state1 <- reactive({
data <- selected %>%
filter(State %in% input$state1)
return (data)
})
state2 <- reactive({
data <- selected %>%
filter(State %in% input$state2)
return (data)
})
output$taxes.map <- renderPlotly({
p <- plot_geo(data = filtered(), locationmode = 'USA-states') %>%
add_trace(z = ~Amount, locations = ~Id, colors = 'Blues') %>%
layout(
geo = list(scope = 'usa')
)
return (p)
})
output$state.compare <- renderPlot({
p <- ggplot() +
geom_col(data = state1(), mapping = aes(x = `Tax Type`, y = Amount, fill = State)) +
geom_col(data = state2(), mapping = aes(x = `Tax Type`, y = Amount, fill = State))
})
}
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
ggplot() +
geom_col(data = state1(), mapping = aes(x = `Tax Type`, y = Amount, fill = State)) +
geom_col(data = state2(), mapping = aes(x = `Tax Type`, y = Amount, fill = State))
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
ggplot() +
geom_col(data = filter(selected, State == 'Alabama'), mapping = aes(x = `Tax Type`, y = Amount, fill = State)) +
geom_col(data = filter(selected, State == 'Alaska'), mapping = aes(x = `Tax Type`, y = Amount, fill = State))
click <- event_data("plotly_click", source = "taxes.map")
runApp('taxes.R')
runApp('taxes.R')
?event_data
?plot_geo
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
View(selected)
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
runApp('taxes.R')
