# Create a variable books.without.four that contains all vectors except forth one.
books.without.four <- books[-4]
print(books.without.four)
# Create a variable long.titles that contains only the elements in your books vector
# whose title is longer than 15 characters.
long.titles <- books[nchar(books)>15]
print(long.titles)
#Part 4. Squares
#Create a variable numbers that contains the numbers 1 to 201.
numbers <- 1:201
print(numbers)
#Create a variable squared.numbers that is your numbers vector with all of the values squared (multiplied by themselves).
squared.numbers <- numbers*numbers
print(squared.numbers)
#Create a variable squared.mean that contains the mean (average) value of the squared vector. Use the mean() function. Print this variable after you create it. Note that this is not what is meant by a "mean squared" in statistics!
squared.mean <- mean(squared.numbers)
print(squared.mean)
#Create a variable squares that contains only the values in numbers which are squares (that is, you can take their square root and get a whole number). Hint: you can determine if a number x is a whole number by comparing if x is the same as round(x) (that is, rounding doesn't change the number). Print this variable after you create it.
if(sqrt(numbers)==round(sqrt(numbers))){
squares <- numbers
}
print(squares)
# assignment2
# part 1
install.packages("stringr")
library("stringr")
# Create a numeric variable my.age that is equal to your age.
my.age <- 19
# Create a variable my.name that stores your name
my.name <- "SAM"
# Define a function called MakeIntroduction that takes a name and an age as arguments.
# The function return a character string of the
# format "Hello, my name is NAME and I'm AGE years old."
MakeIntroduction <- function(my.name, my.age){
return(paste("Hello, my name is", my.name, "and I'm", my.age, "years old."))
}
MakeIntroduction(my.name,my.age)
# Create a variable my.intro by passing your variables my.name and my.age into
# your MakeIntroduction() function. Print the variable after you create it.
my.intro <- MakeIntroduction(my.name,my.age)
print(my.intro)
# Create a variable casual.intro by using the sub() function to replace (substitute)
# "Hello, my name is ", with "Hey, I'm" in your my.intro variable. You may need to
# look up the arguments for this function! Print the variable after you create it.
casual.intro <- sub("Hello, my name is ", "Hey, I'm ", my.intro)
print(casual.intro)
# Install and load the stringr library first and create a variable with each word in my.intro
# capitalized.
capital.intro <- str_to_title(my.intro)
print(capital.intro)
# Create another variable intro.e.count that counts how many "e" in my.intro.
intro.e.count <- str_count(my.intro, "e")
print(intro.e.count)
# part 2
# Use the as.Date() function to create a variable
# spring.break that represents the first day of Spring break (March 18, 2017).
spring.break <- as.Date("2017-03-18" )
spring.break
# create a variable "today" that stores current date
today <- Sys.Date()
today
# Create a variable days.to.break that is how many days until break
days.to.break <- spring.break-today
print(days.to.break)
# Create a new function that returns a string that has name, age,
# how many days until birthday and new age in it.
MakeBirthdayIntro<- function(name,age,birthday){
days.to.birthday <- as.Date(birthday,"%m/%d/%Y")-today
return(paste(MakeIntroduction(name, age),paste("In", days.to.birthday ,"days I'll be",age+1)))
}
# create a variable my.bday.intro with my.name, my.age, my birthday in it and finally print this variable.
my.bday.intro <- MakeBirthdayIntro(my.name,my.age,"02/28/2017")
print(my.bday.intro)
# part 3
# Create a variable books that is a vector of the names of six books
books <- c("One for the Money",	"Six of Crows", "The Five People You Meet in Heaven ","I Was Told There'd Be Cake ", "Neverwhere", "The Great Getsby")
print(books)
# Create a variable top.three.books that has the first three vector in my list.
top.three.books <- books[1:3]
print(top.three.books)
# Create a variable book.reviews and use paste function to add  "is a great read!" at the end of them.
books.reviews <- paste(books, "is a great read!")
print(books.reviews)
# Create a variable books.without.four that contains all vectors except forth one.
books.without.four <- books[-4]
print(books.without.four)
# Create a variable long.titles that contains only the elements in your books vector
# whose title is longer than 15 characters.
long.titles <- books[nchar(books)>15]
print(long.titles)
#Part 4
#Create a variable numbers that contains the numbers 1 to 201.
numbers <- 1:201
print(numbers)
#Create a variable squared.numbers that is your numbers vector with all of the values squared.
squared.numbers <- numbers*numbers
print(squared.numbers)
#Create a variable squared.mean that contains the mean value of the squared vector.
squared.mean <- mean(squared.numbers)
print(squared.mean)
#Create a variable squares that contains only the values in numbers which are squares (that is, you can take their square root and get a whole number). Hint: you can determine if a number x is a whole number by comparing if x is the same as round(x) (that is, rounding doesn't change the number). Print this variable after you create it.
squares <- numbers[sqrt(numbers)==round(sqrt(numbers))]
print(squares)
install.packages("stringr")
# assignment2
# part 1
install.packages("stringr")
library("stringr")
# Create a numeric variable my.age that is equal to your age.
my.age <- 19
# Create a variable my.name that stores your name
my.name <- "SAM"
# Define a function called MakeIntroduction that takes a name and an age as arguments.
# The function return a character string of the
# format "Hello, my name is NAME and I'm AGE years old."
MakeIntroduction <- function(my.name, my.age){
return(paste("Hello, my name is", my.name, "and I'm", my.age, "years old."))
}
MakeIntroduction(my.name,my.age)
# Create a variable my.intro by passing your variables my.name and my.age into
# your MakeIntroduction() function. Print the variable after you create it.
my.intro <- MakeIntroduction(my.name,my.age)
print(my.intro)
# Create a variable casual.intro by using the sub() function to replace (substitute)
# "Hello, my name is ", with "Hey, I'm" in your my.intro variable. You may need to
# look up the arguments for this function! Print the variable after you create it.
casual.intro <- sub("Hello, my name is ", "Hey, I'm ", my.intro)
print(casual.intro)
# Install and load the stringr library first and create a variable with each word in my.intro
# capitalized.
capital.intro <- str_to_title(my.intro)
print(capital.intro)
# Create another variable intro.e.count that counts how many "e" in my.intro.
intro.e.count <- str_count(my.intro, "e")
print(intro.e.count)
# part 2
# Use the as.Date() function to create a variable
# spring.break that represents the first day of Spring break (March 18, 2017).
spring.break <- as.Date("2017-03-18" )
spring.break
# create a variable "today" that stores current date
today <- Sys.Date()
today
# Create a variable days.to.break that is how many days until break
days.to.break <- spring.break-today
print(days.to.break)
# Create a new function that returns a string that has name, age,
# how many days until birthday and new age in it.
MakeBirthdayIntro<- function(name,age,birthday){
days.to.birthday <- as.Date(birthday,"%m/%d/%Y")-today
return(paste(MakeIntroduction(name, age),paste("In", days.to.birthday ,"days I'll be",age+1)))
}
# create a variable my.bday.intro with my.name, my.age, my birthday in it and finally print this variable.
my.bday.intro <- MakeBirthdayIntro(my.name,my.age,"02/28/2017")
print(my.bday.intro)
# part 3
# Create a variable books that is a vector of the names of six books
books <- c("One for the Money",	"Six of Crows", "The Five People You Meet in Heaven ","I Was Told There'd Be Cake ", "Neverwhere", "The Great Getsby")
print(books)
# Create a variable top.three.books that has the first three vector in my list.
top.three.books <- books[1:3]
print(top.three.books)
# Create a variable book.reviews and use paste function to add  "is a great read!" at the end of them.
books.reviews <- paste(books, "is a great read!")
print(books.reviews)
# Create a variable books.without.four that contains all vectors except forth one.
books.without.four <- books[-4]
print(books.without.four)
# Create a variable long.titles that contains only the elements in your books vector
# whose title is longer than 15 characters.
long.titles <- books[nchar(books)>15]
print(long.titles)
#Part 4
#Create a variable numbers that contains the numbers 1 to 201.
numbers <- 1:201
print(numbers)
#Create a variable squared.numbers that is your numbers vector with all of the values squared.
squared.numbers <- numbers*numbers
print(squared.numbers)
#Create a variable squared.mean that contains the mean value of the squared vector.
squared.mean <- mean(squared.numbers)
print(squared.mean)
#Create a variable squares that contains only the values in numbers which are squares (that is, you can take their square root and get a whole number). Hint: you can determine if a number x is a whole number by comparing if x is the same as round(x) (that is, rounding doesn't change the number). Print this variable after you create it.
squares <- numbers[sqrt(numbers)==round(sqrt(numbers))]
print(squares)
scores <- c(23,35,14,17,18,32,35,27,29)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
opponents.scores <- c(32,13,21,28,34,16,19,22,25)
# Combine your two vectors into a dataframe
my.data <- data.frame(scores,opponents.scores)
print(my.data)
View(my.data)
# Read in the Husky Football 2015 game data into a variable called `husky.games.2015`
husky.games.2015 <- read.csv('./data/huskies_2015.csv', stringsAsFactors=FALSE)
# Create a vector of the teams that the Huskies played against during that season
teams <- husky.games.2015$opponent
# Create a vector of the their final scores for the games
# Call this variable `husky.scores`
husky.scores <- husky.games.2015$uw_score
# Create 2 variables called `rushing.yards` and `passing.yards` to represent the yards the Huskies rushed and passed
rushing.yards <- husky.games.2015$rushing_yards
passing.yards <- husky.games.2015$passing_yards
# Create a variable called `combined.yards` that is the total yardage of the Huskies for each game
combined.yards <- rushing.yards + passing.yards
# Add the `combined.yards` vector to the dataframe with the column name being `combined`
husky.games.2015["combined"] <- combined.yards
View(husky.games.2015)
scores <- c(23,35,14,17,18,32,35,27,29)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
opponents.scores <- c(32,13,21,28,34,16,19,22,25)
# Combine your two vectors into a dataframe
my.data <- data.frame(scores,opponents.scores)
print(my.data)
View(my.data)
scores <- c(23,35,14,17,18,32,35,27,29)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
opponents.scores <- c(32,13,21,28,34,16,19,22,25)
# Combine your two vectors into a dataframe
my.data <- data.frame(scores,opponents.scores)
print(my.data)
View(my.data)
# Create a new column "diff" that is the difference in points.
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
my.data[1,scores]
# season (google "Seahawks" for the info!)
scores <- c(23,35,14,17,18,32,35,27,29)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
opponents.scores <- c(32,13,21,28,34,16,19,22,25)
# Combine your two vectors into a dataframe
my.data <- data.frame(scores,opponents.scores)
print(my.data)
View(my.data)
# Create a new column "diff" that is the difference in points.
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
my.data[1,1]
scores <- c(23,35,14,17,18,32,35,27,29)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
opponents.scores <- c(32,13,21,28,34,16,19,22,25)
# Combine your two vectors into a dataframe
my.data <- data.frame(scores,opponents.scores)
print(my.data)
View(my.data)
# Create a new column "diff" that is the difference in points.
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
my.data[1,"scores"]
data("USPersonalExpenditure")
# The variable USPersonalExpenditure is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
data("USPersonalExpenditure")
# The variable USPersonalExpenditure is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can simply pass the USPersonalExpenditure variable as an argument
# to the `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
my.data <- data.frame(USPersonalExpenditure)
is.data.frame(my.data)
data("USPersonalExpenditure")
# The variable USPersonalExpenditure is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can simply pass the USPersonalExpenditure variable as an argument
# to the `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
my.data <- data.frame(USPersonalExpenditure)
is.data.frame(my.data)
# What are the column names of your dataframe?
my.data[1,]
data("USPersonalExpenditure")
# The variable USPersonalExpenditure is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can simply pass the USPersonalExpenditure variable as an argument
# to the `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
my.data <- data.frame(USPersonalExpenditure)
is.data.frame(my.data)
# What are the column names of your dataframe?
colnames(my.data)
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# Th
View(nycflights13)
library("nycflights13")
library("dplyr")
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(nycflights13)
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(nycflights13)
# Use `dplyr` to give t
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(nycflights13)
library("nycflights13")
library("dplyr")
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(nycflights)
library(nycflights13)
library(dplyr)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(nycflights)
library(nycflights13)
library(dplyr)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
library(jsonlite)
library(httr)
library(dplyr)
base.url <- http://pokeapi.co/api/v2/
base.url <- http://pokeapi.co/api/v2
library(shiny)
data("iris")
data(iris)
library(shiny)
data("iris")
iris <- data("iris")
View(iris3)
View(iris)
library(iris)
View(iris)
library("iris")
View(iris)
data("iris")
View(iris)
library(ggplot2)
library(dplyr)
iris <- data("iris")
View(iris)
data("iris")
View(iris)
setwd("C:/Users/yangzhihao/info201/assignment/CSPFinalProject")
# Load the shiny, ggplot2, and dplyr libraries
library("tidyr")
library("maps")
library("shiny")
library("ggplot2")
library("dplyr")
library("plotly")
income.data <- read.csv("data/Income_Employment_2015.csv", stringsAsFactors = FALSE)
filtered.employment <- select(income.data, GEO.display.label,HC03_VC06, HC03_VC07, HC03_VC08) %>%
filter(GEO.display.label != "Puerto Rico" & GEO.display.label != "Geography")
colnames(filtered.employment) <- c("State", "Employed.labor.force", "Unemployed.labor.force", "Armed.labor.force")
filtered.employment$Employed.labor.force <- as.numeric(filtered.employment$Employed.labor.force)
filtered.employment$Unemployed.labor.force <- as.numeric(filtered.employment$Unemployed.labor.force)
filtered.employment$Armed.labor.force <- as.numeric(filtered.employment$Armed.labor.force)
non <- "Not a state"
Northwest <-  c("Alaska", "Washington",
"Oregon", "Idaho", "Montana",
"Wyoming", non, non, non, non,
non, non, non)
South <- c("Florida", "Mississippi",
"Louisiana", "Alabama", "Georgia",
"South Carolina", "North Carolina",
"Tennessee", "Arkansas", "Kentucky",
"Virginia", non, non)
Northeast <- c("Maine", "New Hampshire",
"Vermont", "Massachusetts",
"Rhode Island", "Connecticut",
"New York", "Pennsylvania", "Delaware",
"District of Columbia", "Maryland",
"New Jersey", "West Virginia")
Midwest <- c("Ohio", "Indiana", "Michigan",
"Illinois", "Wisconsin",
"Missouri", "Iowa", "Minnesota",
"Kansas", "Nebraska", "South Dakota",
"North Dakota", non)
Southwest <- c("California", "Hawaii", "Nevada",
"Utah", "Colorado",
"Arizona", "New Mexico",
"Oklahoma", "Texas", non, non, non, non)
regions <- data.frame(Northwest, South, Northeast, Midwest, Southwest)
regions.long <- gather(regions, key = Region, value = State,
Northwest, South, Northeast, Midwest, Southwest)
regions.long <- filter(regions.long, State != "Not a state")
joined <- left_join(regions.long, filtered.employment, by = "State")
long.join <- gather(joined, "type.of.force", "value", Employed.labor.force,
Unemployed.labor.force, Armed.labor.force)
us.maps <- map_data("state")
joined$State <- tolower(joined$State)
State.join <- left_join(joined, us.maps, by = c("State" = "region"))
my.ui <- fluidPage(
# Makes a new title Panel
titlePanel("2015 Employment status in the United States"),
tabsetPanel(type = "tabs",
tabPanel("Map",
sidebarLayout(
# Includes three items on the left panel
sidebarPanel(
radioButtons("radio.region", label = h4("Region"),
choices = list("All" = "All",
"Northwest" = "Northwest",
"South" = "South",
"Northeast" = "Northeast",
"Midwest" = "Midwest",
"Southwest" = "Southwest"),
selected = "All"),
selectInput("labor.type", label = h3("Labor.force.type"),
choices = c("Employed.labor.force", "Unemployed.labor.force", "Armed.labor.force"),
selected = "Employed.labor.force"),
selectInput("state", label = h3("Select State"),
choices = joined$State,
selected = "Alabama")
),
mainPanel(
plotOutput("plot"),
plotOutput("plot1")
)
)
)
)
)
shinyUI(my.ui)
# Load the shiny, ggplot2, and dplyr libraries
library("tidyr")
library("maps")
library("shiny")
library("ggplot2")
library("dplyr")
library("plotly")
income.data <- read.csv("data/Income_Employment_2015.csv", stringsAsFactors = FALSE)
my.server <- function(input, output) {
filtered <- reactive({
new <- filter(long.join, input$state == State)
return(new)
})
filtered.map <- reactive({
new.table <- State.join
if (input$radio.region != "All") {
new.table <- filter(State.join, Region %in% input$radio.region)
}
return(new.table)
})
output$plot <- renderPlot({
if (input$labor.type == "Employed.labor.force") {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group, color = Region,
fill = Employed.labor.force), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#901010")
} else if (input$labor.type == "Unemployed.labor.force") {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group, color = Region,
fill = Unemployed.labor.force), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#672A70")
} else {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group,
fill = Armed.labor.force), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#138A6E")
}
p <- p + coord_fixed(ratio = 1.0)
return(p)
})
output$plot1 <- renderPlot({
my.plot <- ggplot(data = filtered()) +
geom_point(mapping = aes(x = type.of.force, y = value),
stat = "identity")
return(my.plot)
})
}
shinyServer(my.server)
runApp()
runApp()
runApp()
View(long.join)
View(long.join)
runApp()
runApp()
long.join$State <- tolower(long.join$State)
runApp()
runApp()
