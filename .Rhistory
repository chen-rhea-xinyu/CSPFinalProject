# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
# For convenience store the `range()` of values for the `price` and `carat` values
# for the ENTIRE diamonds dataset.
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
# Define a UI using a fluidPage layout
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('price.choice', label="Price (in dollars)", min=price.range[1], max=price.range[2], value=price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput('carat.choice', label="Carats", min=carat.range[1], max=carat.range[2], value=carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('smooth', label=strong("Show Trendline"), value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet.by', label="Facet By", choices=c('cut', 'clarity', 'color'))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
# Define a Server function for the app
server <- function(input, output) {
# reactive variable for shared data
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
p <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color=cut)) +
geom_point() +
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
output$table <- renderDataTable({
return(filtered())
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Info 201/module15-shiny/exercise-2')
install.packages("rsconnect")
runApp('Info 201/module15-shiny/exercise-2')
setwd("~/Info 201/CSPFinalProject")
max.total.pov <- max(filtered.poverty$Total.Poverty)
max.total.18.pov <- max(filtered.poverty$Under.18.Poverty)
mean.table <- group_by(ultra.join, Region) %>%
summarize("mean.percent" = mean(Percent.Total.Poverty),
"mean.percent.18" = mean(Percent.Under.18.Poverty))
server <- function(input, output) {
# reactive table that is used in both the table and ggplot
filtered.map <- reactive({
new.table <- ultra.join
if (input$radio.region != "All") {
new.table <- filter(ultra.join, Region %in% input$radio.region)
}
return(new.table)
})
filtered.graph <- reactive({
new.chart <- filter(filtered.poverty, State == input$state1 | State == input$state2)
return(new.chart)
})
filter.pie <- reactive({
pie.table <- ultra.join
if (input$radio.for.regions != "All") {
pie.table <- filter(ultra.join, Region %in% input$radio.for.regions)
}
pie.table <- group_by(pie.table, State) %>%
summarize("state.percent" = mean(Percent.Total.Poverty),
"state.under.18.percent" = mean(Percent.Under.18.Poverty))
return(pie.table)
})
# The graph, that is based off the reactive data, and inputted color scheme
output$plot <- renderPlot({
if (input$radio.type == 1) {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group, color = Region,
fill = Total.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#901010")
} else if (input$radio.type == 2) {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group, color = Region,
fill = Percent.Total.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#672A70")
} else if (input$radio.type == 3) {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group,
fill = Under.18.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#E6E151")
} else {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group,
fill = Percent.Under.18.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#138A6E")
}
p <- p + coord_fixed(ratio = 1.0)
return(p)
})
output$summary <- renderText({
message <- paste0("This graph shows total population under the poverty line per state")
return(message)
})
output$plot2 <- renderPlot({
if (input$radio == 1) {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = max.total.pov,
ymin = 0,
lower = Total.Poverty - Error.Total,
middle = Total.Poverty,
upper = Total.Poverty + Error.Total,
fill = Total.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
} else if (input$radio == 2) {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = 30,
ymin = 0,
lower = Percent.Total.Poverty - Error.Percent.Total,
middle = Percent.Total.Poverty,
upper = Percent.Total.Poverty + Error.Percent.Total,
fill = Percent.Total.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
} else if (input$radio == 3) {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = max.total.18.pov,
ymin = 0,
lower = Under.18.Poverty - Error.Under.18,
middle = Under.18.Poverty,
upper = Under.18.Poverty + Error.Under.18,
fill = Under.18.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
} else {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = 30,
ymin = 0,
lower = Percent.Under.18.Poverty - Error.Percent.Under.18,
middle = Percent.Under.18.Poverty,
upper = Percent.Under.18.Poverty + Error.Percent.Under.18,
fill = Percent.Under.18.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
}
return(graph)
})
output$plot3 <- renderPlot({
if (input$statistic == 1) {
my.plot <- ggplot(data = mean.table) +
geom_bar(mapping = aes(x = Region, y = mean.percent, fill = Region),
stat = "identity")
} else {
my.plot <- ggplot(data = mean.table) +
geom_bar(mapping = aes(x = Region, y = mean.percent.18, fill = Region),
stat = "identity")
}
if (input$radio.for.regions == "All") {
my.plot <- my.plot + scale_fill_manual(values = c("#E3C73C", "#2821A3",
"#0F7D32", "#D73413", "#932F3E"))
} else if (input$radio.for.regions == "Midwest") {
my.plot <- my.plot + scale_fill_manual(values = c("#E3C73C", "#858585",
"#858585", "#858585", "#858585"))
} else if (input$radio.for.regions == "Northeast") {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#2821A3",
"#858585", "#858585", "#858585"))
} else if (input$radio.for.regions == "Northwest") {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#858585",
"#0F7D32", "#858585", "#858585"))
} else if (input$radio.for.regions == "South") {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#858585",
"#858585", "#D73413", "#858585"))
} else {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#858585",
"#858585", "#858585", "#932F3E"))
}
return(my.plot)
})
output$pie.plot <- renderPlotly({
if (input$radio.for.regions != "All") {
if (input$statistic == 1) {
my.pie <- plot_ly(filter.pie(), labels = ~State, values = ~state.percent, type = 'pie') %>%
layout(title = 'Percentage Under Poverty Line For Region',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
} else {
my.pie <- plot_ly(filter.pie(), labels = ~State, values = ~state.under.18.percent, type = 'pie') %>%
layout(title = 'Percentage Under Poverty Line (Under 18) For Region',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
return(my.pie)
} else {
return(NULL)
}
})
}
shinyServer(server)
library("tidyr")
library("maps")
library("shiny")
library("ggplot2")
library("dplyr")
library("plotly")
poverty.csv <- read.csv("data/Poverty_2015.csv", stringsAsFactors = FALSE)
poverty.table <- data.frame(poverty.csv)
filtered.poverty <- select(poverty.table, GEO.display.label, HC02_EST_VC01, HC02_MOE_VC01, HC03_EST_VC01,
HC03_MOE_VC01,  HC02_EST_VC03, HC02_MOE_VC03, HC03_EST_VC03, HC03_MOE_VC03) %>%
filter(GEO.display.label != "Puerto Rico" & GEO.display.label != "Geography")
colnames(filtered.poverty) <- c("State", "Total.Poverty", "Error.Total", "Percent.Total.Poverty",
"Error.Percent.Total", "Under.18.Poverty", "Error.Under.18",
"Percent.Under.18.Poverty", "Error.Percent.Under.18")
filtered.poverty$Total.Poverty <- as.numeric(filtered.poverty$Total.Poverty)
filtered.poverty$Error.Total <- as.numeric(filtered.poverty$Error.Total)
filtered.poverty$Percent.Total.Poverty <- as.numeric(filtered.poverty$Percent.Total.Poverty)
filtered.poverty$Error.Percent.Total <- as.numeric(filtered.poverty$Error.Percent.Total)
filtered.poverty$Under.18.Poverty <- as.numeric(filtered.poverty$Under.18.Poverty)
filtered.poverty$Error.Under.18 <- as.numeric(filtered.poverty$Error.Under.18)
filtered.poverty$Percent.Under.18.Poverty <- as.numeric(filtered.poverty$Percent.Under.18.Poverty)
filtered.poverty$Error.Percent.Under.18 <- as.numeric(filtered.poverty$Error.Percent.Under.18)
non <- "Not a state"
Northwest <-  c("Alaska", "Washington",
"Oregon", "Idaho", "Montana",
"Wyoming", non, non, non, non,
non, non, non)
South <- c("Florida", "Mississippi",
"Louisiana", "Alabama", "Georgia",
"South Carolina", "North Carolina",
"Tennessee", "Arkansas", "Kentucky",
"Virginia", non, non)
Northeast <- c("Maine", "New Hampshire",
"Vermont", "Massachusetts",
"Rhode Island", "Connecticut",
"New York", "Pennsylvania", "Delaware",
"District of Columbia", "Maryland",
"New Jersey", "West Virginia")
Midwest <- c("Ohio", "Indiana", "Michigan",
"Illinois", "Wisconsin",
"Missouri", "Iowa", "Minnesota",
"Kansas", "Nebraska", "South Dakota",
"North Dakota", non)
Southwest <- c("California", "Hawaii", "Nevada",
"Utah", "Colorado",
"Arizona", "New Mexico",
"Oklahoma", "Texas", non, non, non, non)
regions <- data.frame(Northwest, South, Northeast, Midwest, Southwest)
regions.long <- gather(regions, key = Region, value = State,
Northwest, South, Northeast, Midwest, Southwest)
regions.long <- filter(regions.long, State != "Not a state")
joined.one <- left_join(regions.long, filtered.poverty, by = "State")
the.us <- map_data("state")
joined.one$State <- tolower(joined.one$State)
ultra.join <- left_join(joined.one, the.us, by = c("State" = "region"))
# Makes a UI using a fluidPage layout
ui <- fluidPage(
# Makes a new title Panel
titlePanel("2015 Poverty  in the United States"),
tabsetPanel(type = "tabs",
tabPanel("Map",
sidebarLayout(
# Includes three items on the left panel
sidebarPanel(
radioButtons("radio.region", label = h4("Region"),
choices = list("All" = "All",
"Northwest" = "Northwest",
"South" = "South",
"Northeast" = "Northeast",
"Midwest" = "Midwest",
"Southwest" = "Southwest"),
selected = "All"),
radioButtons("radio.type", label = h4("Statistic"),
choices = list("Total Population Under Poverty Line" = 1,
"Percentage of Population Below Poverty Line" = 2,
"Total Population Under 18" = 3,
"Percentage of Population Under 18 Below Poverty Line" = 4),
selected = 1)
),
mainPanel(
h4(textOutput("summary")), plotOutput("plot")
)
)
),
tabPanel("Graphs",
sidebarLayout(
# Includes three items on the left panel
sidebarPanel(
selectInput("state1", label = h3("Select First State"),
choices = filtered.poverty$State,
selected = "Alabama"),
selectInput("state2", label = h3("Select Second State"),
choices = filtered.poverty$State,
selected = "Alaska"),
radioButtons("radio", label = h4("Statistic"),
choices = list("Total Population Under Poverty Line" = 1,
"Percentage of Population Below Poverty Line" = 2,
"Total Population Under 18" = 3,
"Percentage of Population Under 18 Below Poverty Line" = 4),
selected = 1)
),
mainPanel(
plotOutput("plot2")
)
)
),
tabPanel("Regions",
sidebarLayout(
# Includes three items on the left panel
sidebarPanel(
radioButtons("statistic", label = h4("Statistic"),
choices = list("Percentage of Population Below Poverty Line" = 1,
"Percentage of Population Under 18 Below Poverty Line" = 2),
selected = 1),
radioButtons("radio.for.regions", label = h4("Region"),
choices = list("All" = "All",
"Midwest" = "Midwest",
"Northeast" = "Northeast",
"Northwest" = "Northwest",
"South" = "South",
"Southwest" = "Southwest"),
selected = "All")
),
mainPanel(
plotOutput("plot3"),
plotlyOutput("pie.plot")
)
)
)
)
)
# Makes the UI
shinyUI(ui)
max.total.pov <- max(filtered.poverty$Total.Poverty)
max.total.18.pov <- max(filtered.poverty$Under.18.Poverty)
mean.table <- group_by(ultra.join, Region) %>%
summarize("mean.percent" = mean(Percent.Total.Poverty),
"mean.percent.18" = mean(Percent.Under.18.Poverty))
server <- function(input, output) {
# reactive table that is used in both the table and ggplot
filtered.map <- reactive({
new.table <- ultra.join
if (input$radio.region != "All") {
new.table <- filter(ultra.join, Region %in% input$radio.region)
}
return(new.table)
})
filtered.graph <- reactive({
new.chart <- filter(filtered.poverty, State == input$state1 | State == input$state2)
return(new.chart)
})
filter.pie <- reactive({
pie.table <- ultra.join
if (input$radio.for.regions != "All") {
pie.table <- filter(ultra.join, Region %in% input$radio.for.regions)
}
pie.table <- group_by(pie.table, State) %>%
summarize("state.percent" = mean(Percent.Total.Poverty),
"state.under.18.percent" = mean(Percent.Under.18.Poverty))
return(pie.table)
})
# The graph, that is based off the reactive data, and inputted color scheme
output$plot <- renderPlot({
if (input$radio.type == 1) {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group, color = Region,
fill = Total.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#901010")
} else if (input$radio.type == 2) {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group, color = Region,
fill = Percent.Total.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#672A70")
} else if (input$radio.type == 3) {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group,
fill = Under.18.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#E6E151")
} else {
p <- ggplot(data = filtered.map()) +
geom_polygon(aes(x = long, y = lat, group = group,
fill = Percent.Under.18.Poverty), color = "black") +
scale_fill_continuous(low = "#F2F2F2", high = "#138A6E")
}
p <- p + coord_fixed(ratio = 1.0)
return(p)
})
output$summary <- renderText({
message <- paste0("This graph shows total population under the poverty line per state")
return(message)
})
output$plot2 <- renderPlot({
if (input$radio == 1) {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = max.total.pov,
ymin = 0,
lower = Total.Poverty - Error.Total,
middle = Total.Poverty,
upper = Total.Poverty + Error.Total,
fill = Total.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
} else if (input$radio == 2) {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = 30,
ymin = 0,
lower = Percent.Total.Poverty - Error.Percent.Total,
middle = Percent.Total.Poverty,
upper = Percent.Total.Poverty + Error.Percent.Total,
fill = Percent.Total.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
} else if (input$radio == 3) {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = max.total.18.pov,
ymin = 0,
lower = Under.18.Poverty - Error.Under.18,
middle = Under.18.Poverty,
upper = Under.18.Poverty + Error.Under.18,
fill = Under.18.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
} else {
graph <- ggplot(data = filtered.graph()) +
geom_boxplot(mapping = aes(x = State, ymax = 30,
ymin = 0,
lower = Percent.Under.18.Poverty - Error.Percent.Under.18,
middle = Percent.Under.18.Poverty,
upper = Percent.Under.18.Poverty + Error.Percent.Under.18,
fill = Percent.Under.18.Poverty), stat = "identity") +
scale_fill_continuous(low = "#E68669", high = "#185A90")
}
return(graph)
})
output$plot3 <- renderPlot({
if (input$statistic == 1) {
my.plot <- ggplot(data = mean.table) +
geom_bar(mapping = aes(x = Region, y = mean.percent, fill = Region),
stat = "identity")
} else {
my.plot <- ggplot(data = mean.table) +
geom_bar(mapping = aes(x = Region, y = mean.percent.18, fill = Region),
stat = "identity")
}
if (input$radio.for.regions == "All") {
my.plot <- my.plot + scale_fill_manual(values = c("#E3C73C", "#2821A3",
"#0F7D32", "#D73413", "#932F3E"))
} else if (input$radio.for.regions == "Midwest") {
my.plot <- my.plot + scale_fill_manual(values = c("#E3C73C", "#858585",
"#858585", "#858585", "#858585"))
} else if (input$radio.for.regions == "Northeast") {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#2821A3",
"#858585", "#858585", "#858585"))
} else if (input$radio.for.regions == "Northwest") {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#858585",
"#0F7D32", "#858585", "#858585"))
} else if (input$radio.for.regions == "South") {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#858585",
"#858585", "#D73413", "#858585"))
} else {
my.plot <- my.plot + scale_fill_manual(values = c("#858585", "#858585",
"#858585", "#858585", "#932F3E"))
}
return(my.plot)
})
output$pie.plot <- renderPlotly({
if (input$radio.for.regions != "All") {
if (input$statistic == 1) {
my.pie <- plot_ly(filter.pie(), labels = ~State, values = ~state.percent, type = 'pie') %>%
layout(title = 'Percentage Under Poverty Line For Region',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
} else {
my.pie <- plot_ly(filter.pie(), labels = ~State, values = ~state.under.18.percent, type = 'pie') %>%
layout(title = 'Percentage Under Poverty Line (Under 18) For Region',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
return(my.pie)
} else {
return(NULL)
}
})
}
shinyServer(server)
runApp()
runApp()
runApp()
